from django.db import models
from fhir.resources.patient import Patient as FHIRPatient


# Create your models here.
class PatientResource(models.Model):
    """
    Model to store FHIR Patient resources.
    """
    fhir_id = models.CharField(max_length=255, unique=True, null=True, blank=True, db_index=True)
    name = models.CharField(max_length=255, null=True, blank=True)
    birth_date = models.DateField(null=True, blank=True)
    resource_data = models.JSONField()

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'FHIR Patient Data'
        verbose_name_plural = 'FHIR Patient Data'
        ordering = ['-created_at']

    def __str__(self):
        name_parts = []
        if self.resource_data and 'name' in self.resource_data and self.resource_data['name']:
            for name_obj in self.resource_data['name']:
                if 'given' in name_obj and name_obj['given']:
                    name_parts.append(" ".join(name_obj['given']))
                if 'family' in name_obj and name_obj['family']:
                    name_parts.append(name_obj['family'])
                if name_parts:
                    break
        display_name = " ".join(name_parts).strip() if name_parts else "Unnamed Patient"
        return f"{display_name} (FHIR ID: {self.fhir_id or 'N/A'}, DB ID: {self.id}"

    def save(self, *args, **kwargs):
        # If fhir_id is not set in the model, but 'id' is present in the JSON data,
        # use the JSON 'id' as the model's fhir_id
        if not self.fhir_id and self.resource_data and 'id' in self.resource_data:
            self.fhir_id = self.resource_data['id']

        # If fhir_id is set in the model, ensure it's also set in the JSON data.
        # This handles cases where fhir_id is generated by the server.
        elif self.fhir_id and (not self.resource_data or 'id' not in self.resource_data or self.resource_data['id'] != self.fhir_id):
            if not self.resource_data:
                self.resource_data = {}
            self.resource_data['id'] = self.fhir_id
        super().save(*args, **kwargs)

    def to_fhir(self) -> FHIRPatient:
        """
        Convert the stored JSON data to a FHIR Patient resource.
        """
        return FHIRPatient.parse_obj(self.resource_data)

    def validate_resource(self):
        """
        Validate the FHIR Patient resource.
        """
        patient = self.to_fhir()
        errors = patient.validate()
        if errors:
            raise ValueError(f"Invalid FHIR Patient resource: {errors}")
        return True


