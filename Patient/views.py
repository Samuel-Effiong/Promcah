from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.exceptions import NotFound, ValidationError
from .models import PatientResource
from .serializers import FHIRPatientSerializer

from drf_spectacular.utils import extend_schema_view, extend_schema, OpenApiParameter, OpenApiExample
from drf_spectacular.types import OpenApiTypes


# Define common request/response examples
PATIENT_CREATE_EXAMPLE = OpenApiExample(
    'Create Patient Example',
    summary='Example of a minimal FHIR Patient resource for creation.',
    description='A basic patient with name, gender, and birth date. ID will be generated by the server.',
    value={
        "resourceType": "Patient",
        "name": [{"given": ["John"], "family": "Doe"}],
        "gender": "male",
        "birthDate": "1990-01-01"
    },
    request_only=True,
    media_type='application/json'
)

PATIENT_UPDATE_EXAMPLE = OpenApiExample(
    'Update Patient Example',
    summary='Example of a FHIR Patient resource for update (PUT).',
    description='Full replacement of a patient resource. The `id` in the body must match the URL ID.',
    value={
        "resourceType": "Patient",
        "id": "example-patient-id",  # This ID should match the URL path
        "name": [{"given": ["Jane"], "family": "Doe", "use": "official"}],
        "gender": "female",
        "birthDate": "1992-05-20",
        "telecom": [{"system": "phone", "value": "555-987-6543", "use": "home"}]
    },
    request_only=True,
    media_type='application/json'
)

PATIENT_PARTIAL_UPDATE_EXAMPLE = OpenApiExample(
    'Partial Update Patient Example',
    summary='Example of a partial FHIR Patient resource for update (PATCH).',
    description='Only provide the fields you want to update. The `id` is optional in the body for PATCH.',
    value={
        "gender": "other",
        "telecom": [{"system": "email", "value": "jane.doe@example.com"}]
    },
    request_only=True,
    media_type='application/json'
)

PATIENT_RESPONSE_EXAMPLE = OpenApiExample(
    'Patient Response Example',
    summary='Example of a returned FHIR Patient resource.',
    description='A complete FHIR Patient resource as returned by the server.',
    value={
        "resourceType": "Patient",
        "id": "generated-uuid-12345",
        "meta": {
            "lastUpdated": "2025-06-27T10:00:00Z"
        },
        "name": [{"given": ["Alice"], "family": "Smith", "use": "official"}],
        "gender": "female",
        "birthDate": "1985-03-15",
        "active": True
    },
    response_only=True,
    media_type='application/json'
)


# Create your views here.

@extend_schema(tags=['Patients'])
class PatientFHIRViewSet(viewsets.ModelViewSet):
    """
   API endpoint that allows FHIR Patient resources to be created, viewed, updated or deleted.

   This ViewSet provides a RESTful interface for managing FHIR R4 Patient resources.
   It leverages the `fhir.resources` package for robust validation of incoming data
   and ensures that all operations conform to FHIR standards where applicable.

   The `fhir_id` field in the URL path refers to the FHIR logical ID of the Patient resource.
   If an ID is not provided during creation, the server will generate a UUID.
   """
    queryset = PatientResource.objects.all()
    serializer_class = FHIRPatientSerializer
    lookup_field = 'fhir_id'

    def get_object(self):
        """
       Retrieve the object based on the fhir_id provided in the URL.
       This custom method ensures that the lookup uses the `fhir_id` field
       of the `PatientResource` model.
       """
        queryset = self.filter_queryset(self.get_queryset())

        # Get the value from the URL kwargs
        lookup_value = self.kwargs.get(self.lookup_url_kwarg or self.lookup_field)

        if not lookup_value:
            raise NotFound('FHIR Patient ID not provided in the URL')

        try:
            # Attempt to retrieve the PatientResource instance using the fhir_id
            obj = queryset.get(**{self.lookup_field: lookup_value})
        except PatientResource.DoesNotExist:
            raise NotFound(detail=f"FHIR Patient with ID '{lookup_value}' not found")

        # Check object permissions
        self.check_object_permissions(self.request, obj)
        return obj

    @extend_schema(
        summary="List all FHIR Patient resources",
        description="Retrieves a list of all FHIR Pateint resources stored in the system.",
        responses={
            200: FHIRPatientSerializer(many=True),
            401: {'description': 'Authentication credential wer not provided'}
        }
    )
    def list(self, request, *args, **kwargs):
        """
        Returns a list of all patients
        """
        return super().list(request, *args, **kwargs)

    @extend_schema(
        summary="Create a new FHIR Patient resource",
        description="Creates a new FHIR Patient resource. If no `id` is provided in the request body, a UUID will be generated by the server and assigned as the FHIR logical ID.",
        request=FHIRPatientSerializer,
        responses={
            201: OpenApiTypes.OBJECT,  # Use OpenApiTypes.OBJECT to indicate arbitrary JSON
            # Alternatively, you can use FHIRPatientSerializer(examples=[PATIENT_RESPONSE_EXAMPLE])
            # if your serializer outputs the full FHIR JSON directly.
            400: {"description": "Invalid FHIR Patient resource or validation error."},
            409: {"description": "A patient with the provided FHIR ID already exists (if ID was provided in request)."},
            401: {"description": "Authentication credentials were not provided."},
        },
    )
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)  # Validate incoming FHIR data

        # Perform the creation, which will also handle generating fhir_id if missing
        self.perform_create(serializer)

        # Get the newly created instance from the serializer
        instance = serializer.instance

        # FHIR specifies that the resource ID should be returned in the Location header
        # and also as part of the resource itself

        # Construct the absoulute URL for the newly created resource
        location_header = f"{request.build_absolute_uri()}{instance.fhir_id}"

        # Return the full FHIR JSON of the created resource with 201 Created status
        return Response(instance.resource_data, status=status.HTTP_201_CREATED, headers={'Location': location_header})

    @extend_schema(
        summary="Update an existing FHIR Patient resource (full replacement)",
        description="Performs a full update (PUT) of an existing FHIR Patient resource. The `id` in the request body **must** match the `fhir_id` in the URL path. All fields in the FHIR resource are expected to be provided.",
        parameters=[
            OpenApiParameter(
                name='fhir_id',
                type=OpenApiTypes.STR,
                location=OpenApiParameter.PATH,
                description='The FHIR logical ID of the Patient resource to update.',
                required=True,
            )
        ],
        request=FHIRPatientSerializer,
        responses={
            200: FHIRPatientSerializer,
            400: {"description": "Invalid FHIR Patient resource, validation error, or ID mismatch."},
            404: {"description": "FHIR Patient with the specified ID not found."},
            401: {"description": "Authentication credentials were not provided."},
        },
    )
    def update(self, request, *args, **kwargs):
        # Get the existing instance based on the URL's fhir_id
        instance = self.get_object()

        # FHIR PUT requires the 'id' in the request body to match the 'id' in the URL
        # If 'id' is present in the body and doesn't match, it is a bad request
        request_fhir_id = request.data.get('id')
        if request_fhir_id and str(request_fhir_id) != str(instance.fhir_id):
            raise ValidationError(
                {'id': 'FHIR resource ID in body does not match ID in URL path for PUT operation.'}
            )
        # Pass the existing instance and the full request data to the serializer for update.from
        # partial=False ensures all fields are validated as required for a PUT
        serializer = self.get_serializer(instance, data=request.data, partial=False)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)

        return Response(serializer.data)

    @extend_schema(
        summary="Partially update an existing FHIR Patient resource",
        description="Performs a partial update (PATCH) of an existing FHIR Patient resource. Only the fields provided in the request body will be updated.",
        parameters=[
            OpenApiParameter(
                name='fhir_id',
                type=OpenApiTypes.STR,
                location=OpenApiParameter.PATH,
                description='The FHIR logical ID of the Patient resource to partially update.',
                required=True,
            )
        ],
        request=FHIRPatientSerializer(partial=True),
        responses={
            200: FHIRPatientSerializer,
            400: {"description": "Invalid FHIR Patient resource or validation error."},
            404: {"description": "FHIR Patient with the specified ID not found."},
            401: {"description": "Authentication credentials were not provided."},
        },
    )
    def partial_update(self, request, *args, **kwargs):
        """
        Handles partial update of an existing FHIR Patient resource (HTTP PATCH).
        """
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)
        return Response(serializer.data)

    @extend_schema(
        summary="Delete a FHIR Patient resource",
        description="Deletes a FHIR Patient resource using its FHIR logical ID.",
        parameters=[
            OpenApiParameter(
                name='fhir_id',
                type=OpenApiTypes.STR,
                location=OpenApiParameter.PATH,
                description='The FHIR logical ID of the Patient resource to delete.',
                required=True,
            )
        ],
        responses={
            204: {"description": "Patient resource deleted successfully (No Content)."},
            404: {"description": "FHIR Patient with the specified ID not found."},
            401: {"description": "Authentication credentials were not provided."},
        },
    )
    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response(status=status.HTTP_204_NO_CONTENT)